using System;
using System.Linq;
using System.Web.Http;
using AutoMapper;
using MovieBase.Dtos;
using MovieBase.Models;

namespace Vidly.Controllers.Api {
     public class MoviesController : ApiController {
        // Used to access the database for this class.
        private ApplicationDbContext _context;

        public MoviesController() {
            // Initialized upon calling this controller during run-time.
            _context = new ApplicationDbContext();
        }

        // GET /api/movies
        public IHttpActionResult GetMovies() {
            // Returns a list of objects (movies) & uses Mapper to utilize MovieDto.
            var movieDto = _context.Movies.ToList().Select(Mapper.Map<Movie, MovieDto>);
            // Then return the movie result from the Mapper method.
            return Ok(movieDto);
        }

        // GET /api/movies/1
        public IHttpActionResult GetMovie(int id) {
            // Returns one object (movie) by using a matching id.
            Movie movie = _context.Movies.SingleOrDefault(m => m.Id == id);
            // If there's no movie, return the standard not found http response.
            if (movie == null) return NotFound();
            // Otherwise return the movie via the Mapper method.
            return Ok(Mapper.Map<Movie, MovieDto>(movie));
        }

        // POST /api/movies
        [HttpPost]
        public IHttpActionResult CreateMovie(MovieDto movieDto) {
            // Changes the program's flow via using validation data or return an error.
            if (!ModelState.IsValid) return BadRequest();

            // Maps MovieDto to the Movie class before touching the database.
            Movie movie = Mapper.Map<MovieDto, Movie>(movieDto);
            // Adds it to dbContext before saving it to the database. Finally return movie.
            _context.Movies.Add(movie);
            _context.SaveChanges();

            // Copies over the id generated by the database for movie.
            movieDto.Id = movie.Id;
            // Creates the pathway to a specific movie via the id
            // generated and using movieDto that was just created.
            return Created(new Uri(Request.RequestUri + "/" + movie.Id), movieDto);
        }

        // PUT /api/movies/1
        [HttpPut]
        public IHttpActionResult UpdateMovie(int id, MovieDto movieDto) {
            // Changes the program's flow via using validation data or return an error.
            if (!ModelState.IsValid) return BadRequest();
            // Returns one object (movie) by using a matching id.
            Movie movieInDb = _context.Movies.SingleOrDefault(m => m.Id == id);
            // If there's no movie, return the standard not found http response.
            if (movieInDb == null) return NotFound();

            // Maps the movie Dto variant to the movie's database variant.
            Mapper.Map(movieDto, movieInDb);
            // Saves the changes to the database.
            _context.SaveChanges();
            return Ok();
        }

        // DELETE /api/movies/1
        [HttpDelete]
        public IHttpActionResult DeleteMovie(int id) {
            // Returns one object (movie) by using a matching id.
            Movie movieInDb = _context.Movies.SingleOrDefault(m => m.Id == id);
            // If there's no movie, return the standard not found http response.
            if (movieInDb == null) return NotFound();

            // Delete the movie & saves the changes to the database.
            _context.Movies.Remove(movieInDb);
            _context.SaveChanges();
            return Ok();
        }
    }
 }